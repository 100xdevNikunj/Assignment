/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const fs = require('fs');  
  const server = express();
  server.use(express.json())
  
  // Middleware for reading the todos.json file
  function readTodosFile(req, res, next) {
    fs.readFile('todos.json', 'utf8', (err, data) => {
      if (err) {
        console.error(err);
        return res.status(500).send('Error reading todos.json');
      }
      let todosArray;
      try {
        todosArray = JSON.parse(data);
        if (!Array.isArray(todosArray)) {
          throw new Error('Data in the file is not an array');
        }
      } catch (parseError) {
        console.error('Error parsing JSON:', parseError);
        return res.status(500).send('Error parsing todos.json');
      }
      req.todosArray = todosArray;
      next();
    });
  }
  
  // Middleware for finding a todo by ID
  function findTodoByID(req, res, next) {
    const id = parseInt(req.params.id);
    const { todosArray } = req;
    const todo = todosArray.find((todo) => todo.id === id);
    if (todo) {
      req.todo = todo;
      next();
    } else {
      res.status(404).send('Todo not found');
    }
  }
  
  // Routes using the middleware
  server.get('/todos', readTodosFile, (req, res) => {
    res.status(200).json(req.todosArray);
  });
  
  server.get('/todos/:id', readTodosFile, findTodoByID, (req, res) => {
    res.status(200).json(req.todo);
  });
  
  server.post('/todos', readTodosFile, (req, res) => {
    const { title, description } = req.body;
    const id = req.todosArray.length + 1;
    const newTodo = { id, title, description };
    req.todosArray.push(newTodo);
    fs.writeFile('todos.json', JSON.stringify(req.todosArray), (err) => {
      if (err) {
        console.error(err);
        res.status(500).send('Error writing todos.json');
      } else {
        res.status(201).json({ id }); 
      }
    });
  });
  
  server.listen(3000, () => {
    console.log('Listening on port 3000');
  })
  